{"1.0.8-rc1",
 [{"1.0.7",
   [{add_module,'Elixir.Archethic.P2P.Message.FirstTransactionAddress'},
    {add_module,'Elixir.Archethic.P2P.Message.GetFirstTransactionAddress'},
    {add_module,'Elixir.Archethic.P2P.Message.ReplicationAttestationMessage'},
    {add_module,'Elixir.Archethic.P2P.Message.TransactionSummaryMessage'},
    {add_module,'Elixir.Archethic.P2P.MessageId'},
    {add_module,'Elixir.ArchethicWeb.PlugThrottleByIPHigh'},
    {add_module,'Elixir.ArchethicWeb.PlugThrottleByIPLow'},
    {add_module,'Elixir.ArchethicWeb.PlugThrottleByIPandPath'},
    {load_module,'Elixir.Archethic.Cldr.Currency',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Number.Transliterate',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.Constraints',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Metrics.ETSFlush',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.MemTable',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.GeoPatch.GeoIP.MaxMindDB',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.Listener',{advanced,[]},brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.BeaconSummaryList',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.BootstrappingNodes',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.EncryptedStorageNonce',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Error',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummariesAggregate',brutal_purge,soft_purge,
                 []},
    {load_module,'Elixir.Archethic.P2P.Message.NodeList',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.NotFound',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Ok',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.P2PView',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Ping',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionChainLength',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionInputList',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionList',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.UnspentOutputList',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Replication.TransactionPool',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Reward.MemTables.RewardTokens',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {update,'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {update,'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {update,'Elixir.Archethic.Utils.JobCache',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobConductor',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.PortHandler',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.Regression.Benchmark.SeedHolder',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {load_module,'Elixir.ArchethicCache.LRU',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.AEWebRouter',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.WebHostingController.DirectoryListing',brutal_purge,soft_purge,
                 []},
    {load_module,'Elixir.ArchethicWeb.DirListingView',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.Endpoint',brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.ExplorerLive.TopTransactionsCache',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema.Compiled',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.Pagination',brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.Supervisor',supervisor},
    {update,'Elixir.ArchethicWeb.TransactionCache',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Utils',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.Contracts.ActionInterpreter',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Utils']},
    {load_module,'Elixir.Archethic.Contracts.ConditionInterpreter',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.TransactionStatements',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Utils']},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.Crypto.Ed25519.LibSodiumPort',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.TPMImpl',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Update',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Bootstrap.TransactionHandler',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.SoftwareImpl',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.SoftwareImpl',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Application',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Reward','Elixir.Archethic.Utils',
                  'Elixir.ArchethicWeb.Endpoint']},
    {update,'Elixir.Archethic.Crypto.SharedSecretsKeystore.SoftwareImpl',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger',
             'Elixir.Archethic.Crypto','Elixir.Archethic.Reward',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic',
             'Elixir.Archethic.Contracts.ActionInterpreter',
             'Elixir.Archethic.Contracts.ConditionInterpreter',
             'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Contracts',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ConditionInterpreter',
                  'Elixir.Archethic.Contracts.Loader',
                  'Elixir.Archethic.Contracts.TransactionLookup',
                  'Elixir.Archethic.Contracts.Worker']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts',
             'Elixir.Archethic.Contracts.TransactionLookup',
             'Elixir.Archethic.Contracts.Worker','Elixir.Archethic.DB',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library',brutal_purge,soft_purge,
                 ['Elixir.Archethic',
                  'Elixir.Archethic.Contracts.Interpreter.Utils',
                  'Elixir.Archethic.Contracts.TransactionLookup',
                  'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainReader',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
                  'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
                  'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
                  'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB',brutal_purge,soft_purge,['Elixir.Archethic.DB.EmbeddedImpl']},
    {update,'Elixir.Archethic.Election.HypergeometricDistribution',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.Governance.Pools.MemTableLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.P2P.MemTable',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.P2P.Message.FirstPublicKey',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GenesisAddress',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBalance',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummaries',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummary',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.P2P.Message.GetCurrentSummaries',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.Subset']},
    {load_module,'Elixir.Archethic.P2P.Message.GetUnspentOutputs',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.LastTransactionAddress',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ListNodes',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.P2P.Message.NewTransaction',brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyEndOfNodeSync',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyReplicationValidation',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.RegisterBeaconUpdates',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicationError',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionSummaryList',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidateTransaction',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication']},
    {load_module,'Elixir.Archethic.Utils.Regression.Playbook',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.Utils',brutal_purge,soft_purge,['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.P2P.Message.AcknowledgeStorage',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.AddMiningContext',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.Balance',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.BeaconUpdate',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.CrossValidate',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.CrossValidationDone',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.ArchethicWeb.FaucetRateLimiter',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic']},
    {load_module,'Elixir.Archethic.P2P.Message.GetFirstPublicKey',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetGenesisAddress',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetLastTransaction',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetLastTransactionAddress',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetNextAddresses',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetP2PView',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetStorageNonce',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransaction',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionChainLength',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionInputs',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionSummary',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyPreviousChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.StartMining',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidationError',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {update,'Elixir.Archethic.Reward.MemTablesLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Reward.MemTables.RewardTokens',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.TransactionChain.MemTablesLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.DB',
             'Elixir.Archethic.TransactionChain.MemTables.PendingLedger']},
    {load_module,'Elixir.ArchethicWeb.BeaconChainLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.P2P',
                  'Elixir.ArchethicWeb.TransactionCache']},
    {load_module,'Elixir.Archethic.TransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
                  'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
                  'Elixir.Archethic.TransactionChain.MemTablesLoader']},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.P2P','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema.Resolver',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema',brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.GraphQLSchema.Resolver']},
    {load_module,'Elixir.ArchethicWeb.NodeSharedSecretsChainLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain']},
    {update,'Elixir.ArchethicWeb.TransactionSubscriber',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Crypto',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter']},
    {update,'Elixir.Archethic.Metrics.Poller',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P']},
    {load_module,'Elixir.ArchethicWeb.RewardChainLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl.ChainReader',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.OracleChain.MemTableLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.OracleChain.MemTable',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.P2P.BootstrappingSeeds',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.ArchethicWeb.OracleChainLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SharedSecrets.MemTablesLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
             'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
             'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.SettingsLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P','Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {load_module,'Elixir.Archethic.P2P.Message',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.Message.AcknowledgeStorage',
                  'Elixir.Archethic.P2P.Message.AddMiningContext',
                  'Elixir.Archethic.P2P.Message.Balance',
                  'Elixir.Archethic.P2P.Message.BeaconSummaryList',
                  'Elixir.Archethic.P2P.Message.BeaconUpdate',
                  'Elixir.Archethic.P2P.Message.BootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.CrossValidate',
                  'Elixir.Archethic.P2P.Message.CrossValidationDone',
                  'Elixir.Archethic.P2P.Message.EncryptedStorageNonce',
                  'Elixir.Archethic.P2P.Message.Error',
                  'Elixir.Archethic.P2P.Message.FirstPublicKey',
                  'Elixir.Archethic.P2P.Message.GenesisAddress',
                  'Elixir.Archethic.P2P.Message.GetBalance',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummaries',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummariesAggregate',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummary',
                  'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.GetCurrentSummaries',
                  'Elixir.Archethic.P2P.Message.GetFirstPublicKey',
                  'Elixir.Archethic.P2P.Message.GetGenesisAddress',
                  'Elixir.Archethic.P2P.Message.GetLastTransaction',
                  'Elixir.Archethic.P2P.Message.GetLastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.GetNextAddresses',
                  'Elixir.Archethic.P2P.Message.GetP2PView',
                  'Elixir.Archethic.P2P.Message.GetStorageNonce',
                  'Elixir.Archethic.P2P.Message.GetTransaction',
                  'Elixir.Archethic.P2P.Message.GetTransactionChain',
                  'Elixir.Archethic.P2P.Message.GetTransactionChainLength',
                  'Elixir.Archethic.P2P.Message.GetTransactionInputs',
                  'Elixir.Archethic.P2P.Message.GetTransactionSummary',
                  'Elixir.Archethic.P2P.Message.GetUnspentOutputs',
                  'Elixir.Archethic.P2P.Message.LastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.ListNodes',
                  'Elixir.Archethic.P2P.Message.NewBeaconSlot',
                  'Elixir.Archethic.P2P.Message.NewTransaction',
                  'Elixir.Archethic.P2P.Message.NodeList',
                  'Elixir.Archethic.P2P.Message.NotFound',
                  'Elixir.Archethic.P2P.Message.NotifyEndOfNodeSync',
                  'Elixir.Archethic.P2P.Message.NotifyLastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.NotifyPreviousChain',
                  'Elixir.Archethic.P2P.Message.NotifyReplicationValidation',
                  'Elixir.Archethic.P2P.Message.Ok',
                  'Elixir.Archethic.P2P.Message.P2PView',
                  'Elixir.Archethic.P2P.Message.Ping',
                  'Elixir.Archethic.P2P.Message.RegisterBeaconUpdates',
                  'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',
                  'Elixir.Archethic.P2P.Message.ReplicateTransaction',
                  'Elixir.Archethic.P2P.Message.ReplicateTransactionChain',
                  'Elixir.Archethic.P2P.Message.ReplicationError',
                  'Elixir.Archethic.P2P.Message.ShardRepair',
                  'Elixir.Archethic.P2P.Message.StartMining',
                  'Elixir.Archethic.P2P.Message.TransactionChainLength',
                  'Elixir.Archethic.P2P.Message.TransactionInputList',
                  'Elixir.Archethic.P2P.Message.TransactionList',
                  'Elixir.Archethic.P2P.Message.TransactionSummaryList',
                  'Elixir.Archethic.P2P.Message.UnspentOutputList',
                  'Elixir.Archethic.P2P.Message.ValidateTransaction',
                  'Elixir.Archethic.P2P.Message.ValidationError']},
    {load_module,'Elixir.Archethic.P2P',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P.BootstrappingSeeds',
                  'Elixir.Archethic.P2P.MemTable',
                  'Elixir.Archethic.P2P.MemTableLoader',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NewBeaconSlot',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ShardRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P.MemTable',
             'Elixir.Archethic.P2P.Message','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Client.DefaultImpl',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.Update',
                  'Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P.Client.Connection',
                  'Elixir.Archethic.P2P.Message']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyLastTransactionAddress',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Replication',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.Replication.TransactionPool',
                  'Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicateTransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.Replication',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicateTransaction',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.OracleChain.Scheduler',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.P2P.MemTableLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.MemTable',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync.TransactionHandler',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Reward.Scheduler',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB','Elixir.Archethic.P2P',
             'Elixir.Archethic.Reward','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Reward',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Reward.MemTables.RewardTokens',
                  'Elixir.Archethic.Reward.MemTablesLoader',
                  'Elixir.Archethic.Reward.Scheduler',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
		{apply,{supervisor, restart_child,
						 ['Elixir.ArchethicWeb.Supervisor', 'Elixir.ArchethicWeb.PlugAttack.Storage']}}]}],
 [{"1.0.7",
   [{apply, {supervisor, terminate_child,
							['Elixir.ArchethicWeb.Supervisor', 'Elixir.ArchethicWeb.PlugAttack.Storage']}},
    {apply, {supervisor, delete_child,
							['Elixir.ArchethicWeb.Supervisor', 'Elixir.ArchethicWeb.PlugAttack.Storage']}},
		{delete_module,'Elixir.Archethic.P2P.Message.FirstTransactionAddress'},
    {delete_module,'Elixir.Archethic.P2P.Message.GetFirstTransactionAddress'},
    {delete_module,'Elixir.Archethic.P2P.Message.ReplicationAttestationMessage'},
    {delete_module,'Elixir.Archethic.P2P.Message.TransactionSummaryMessage'},
    {delete_module,'Elixir.Archethic.P2P.MessageId'},
    {delete_module,'Elixir.ArchethicWeb.PlugThrottleByIPHigh'},
    {delete_module,'Elixir.ArchethicWeb.PlugThrottleByIPLow'},
    {delete_module,'Elixir.ArchethicWeb.PlugThrottleByIPandPath'},
    {load_module,'Elixir.Archethic.Cldr.Currency',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.Cldr.Number.Transliterate',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Election.Constraints',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Metrics.ETSFlush',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.OracleChain.MemTable',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.GeoPatch.GeoIP.MaxMindDB',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.P2P.Listener',{advanced,[]},brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.BeaconSummaryList',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.BootstrappingNodes',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.EncryptedStorageNonce',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Error',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummariesAggregate',brutal_purge,soft_purge,
                 []},
    {load_module,'Elixir.Archethic.P2P.Message.NodeList',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.NotFound',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Ok',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.P2PView',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.Ping',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionChainLength',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionInputList',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionList',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.Archethic.P2P.Message.UnspentOutputList',brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Replication.TransactionPool',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Reward.MemTables.RewardTokens',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {update,'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {update,'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {update,'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {update,'Elixir.Archethic.Utils.JobCache',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.JobConductor',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.PortHandler',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Utils.Regression.Benchmark.SeedHolder',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {load_module,'Elixir.ArchethicCache.LRU',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.AEWebRouter',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.API.WebHostingController.DirectoryListing',brutal_purge,soft_purge,
                 []},
    {load_module,'Elixir.ArchethicWeb.DirListingView',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.Endpoint',brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.ExplorerLive.TopTransactionsCache',
            {advanced,[]},brutal_purge,soft_purge,
            []},
    {load_module,'Elixir.ArchethicWeb.ExplorerRouter',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema.Compiled',brutal_purge,soft_purge,[]},
    {load_module,'Elixir.ArchethicWeb.Pagination',brutal_purge,soft_purge,[]},
    {update,'Elixir.ArchethicWeb.Supervisor',supervisor},
    {update,'Elixir.ArchethicWeb.TransactionCache',{advanced,[]},brutal_purge,soft_purge,[]},
    {update,'Elixir.Archethic.Account.MemTables.TokenLedger',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.Account.MemTables.UCOLedger',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.BeaconChain.SummaryTimer',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Utils',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.Contracts.ActionInterpreter',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Utils']},
    {load_module,'Elixir.Archethic.Contracts.ConditionInterpreter',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.TransactionStatements',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.Interpreter.Utils']},
    {update,'Elixir.Archethic.Contracts.TransactionLookup',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.DB']},
    {update,'Elixir.Archethic.Crypto.Ed25519.LibSodiumPort',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.TPMImpl',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils.PortHandler']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.BeaconChain.Update',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Bootstrap.TransactionHandler',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.Origin.SoftwareImpl',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Crypto.NodeKeystore.SoftwareImpl',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.DB.EmbeddedImpl','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Application',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Reward','Elixir.Archethic.Utils',
                  'Elixir.ArchethicWeb.Endpoint']},
    {update,'Elixir.Archethic.Crypto.SharedSecretsKeystore.SoftwareImpl',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Account.MemTablesLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Account.MemTables.TokenLedger',
             'Elixir.Archethic.Account.MemTables.UCOLedger',
             'Elixir.Archethic.Crypto','Elixir.Archethic.Reward',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.BeaconChain.SlotTimer',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Contracts.Worker',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic',
             'Elixir.Archethic.Contracts.ActionInterpreter',
             'Elixir.Archethic.Contracts.ConditionInterpreter',
             'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Contracts',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts.ConditionInterpreter',
                  'Elixir.Archethic.Contracts.Loader',
                  'Elixir.Archethic.Contracts.TransactionLookup',
                  'Elixir.Archethic.Contracts.Worker']},
    {update,'Elixir.Archethic.Contracts.Loader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Contracts',
             'Elixir.Archethic.Contracts.TransactionLookup',
             'Elixir.Archethic.Contracts.Worker','Elixir.Archethic.DB',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.BeaconChain.Subset',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.BeaconChain.SlotTimer',
             'Elixir.Archethic.BeaconChain.Subset.SummaryCache',
             'Elixir.Archethic.BeaconChain.SummaryTimer',
             'Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Contracts.Interpreter.Library',brutal_purge,soft_purge,
                 ['Elixir.Archethic',
                  'Elixir.Archethic.Contracts.Interpreter.Utils',
                  'Elixir.Archethic.Contracts.TransactionLookup',
                  'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl.BootstrapInfo',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainReader',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
                  'Elixir.Archethic.DB.EmbeddedImpl.InputsWriter',
                  'Elixir.Archethic.DB.EmbeddedImpl.P2PView',
                  'Elixir.Archethic.DB.EmbeddedImpl.StatsInfo',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB',brutal_purge,soft_purge,['Elixir.Archethic.DB.EmbeddedImpl']},
    {update,'Elixir.Archethic.Election.HypergeometricDistribution',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {update,'Elixir.Archethic.Governance.Pools.MemTableLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.P2P.MemTable',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.P2P.Message.FirstPublicKey',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GenesisAddress',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBalance',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummaries',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBeaconSummary',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.P2P.Message.GetCurrentSummaries',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.Subset']},
    {load_module,'Elixir.Archethic.P2P.Message.GetUnspentOutputs',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.LastTransactionAddress',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ListNodes',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.P2P.Message.NewTransaction',brutal_purge,soft_purge,
                 ['Elixir.Archethic']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyEndOfNodeSync',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyReplicationValidation',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.RegisterBeaconUpdates',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicationError',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.TransactionSummaryList',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidateTransaction',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication']},
    {load_module,'Elixir.Archethic.Utils.Regression.Playbook',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.Utils',brutal_purge,soft_purge,['Elixir.Archethic.Crypto']},
    {load_module,'Elixir.Archethic.P2P.Message.AcknowledgeStorage',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.AddMiningContext',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.Balance',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.BeaconUpdate',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.CrossValidate',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.CrossValidationDone',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils']},
    {update,'Elixir.ArchethicWeb.FaucetRateLimiter',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic']},
    {load_module,'Elixir.Archethic.P2P.Message.GetFirstPublicKey',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetGenesisAddress',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetLastTransaction',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetLastTransactionAddress',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetNextAddresses',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetP2PView',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetStorageNonce',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransaction',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionChainLength',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionInputs',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.GetTransactionSummary',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyPreviousChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Replication','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.StartMining',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ValidationError',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Utils',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {update,'Elixir.Archethic.Reward.MemTablesLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Reward.MemTables.RewardTokens',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.Scheduler',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.TransactionChain.MemTablesLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.DB',
             'Elixir.Archethic.TransactionChain.MemTables.PendingLedger']},
    {load_module,'Elixir.ArchethicWeb.BeaconChainLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.P2P',
                  'Elixir.ArchethicWeb.TransactionCache']},
    {load_module,'Elixir.Archethic.TransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.TransactionChain.MemTables.KOLedger',
                  'Elixir.Archethic.TransactionChain.MemTables.PendingLedger',
                  'Elixir.Archethic.TransactionChain.MemTablesLoader']},
    {update,'Elixir.Archethic.Utils.DetectNodeResponsiveness',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SelfRepair.Notifier',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.P2P','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema.Resolver',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.GraphQLSchema',brutal_purge,soft_purge,
                 ['Elixir.ArchethicWeb.GraphQLSchema.Resolver']},
    {load_module,'Elixir.ArchethicWeb.NodeSharedSecretsChainLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain']},
    {update,'Elixir.ArchethicWeb.TransactionSubscriber',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic.Crypto',brutal_purge,soft_purge,
                 ['Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter']},
    {update,'Elixir.Archethic.Metrics.Poller',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P']},
    {load_module,'Elixir.ArchethicWeb.RewardChainLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.DB.EmbeddedImpl.ChainReader',brutal_purge,soft_purge,
                 ['Elixir.Archethic.DB.EmbeddedImpl.ChainIndex',
                  'Elixir.Archethic.DB.EmbeddedImpl.ChainWriter',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.OracleChain.MemTableLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.OracleChain.MemTable',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.P2P.BootstrappingSeeds',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P']},
    {load_module,'Elixir.Archethic',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain']},
    {load_module,'Elixir.ArchethicWeb.OracleChainLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.SharedSecrets.MemTablesLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto',
             'Elixir.Archethic.SharedSecrets.MemTables.NetworkLookup',
             'Elixir.Archethic.SharedSecrets.MemTables.OriginKeyLookup',
             'Elixir.Archethic.SharedSecrets.NodeRenewalScheduler',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.ArchethicWeb.SettingsLive',brutal_purge,soft_purge,
                 ['Elixir.Archethic','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P','Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.ArchethicWeb.TransactionSubscriber']},
    {load_module,'Elixir.Archethic.P2P.Message',brutal_purge,soft_purge,
                 ['Elixir.Archethic.P2P.Message.AcknowledgeStorage',
                  'Elixir.Archethic.P2P.Message.AddMiningContext',
                  'Elixir.Archethic.P2P.Message.Balance',
                  'Elixir.Archethic.P2P.Message.BeaconSummaryList',
                  'Elixir.Archethic.P2P.Message.BeaconUpdate',
                  'Elixir.Archethic.P2P.Message.BootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.CrossValidate',
                  'Elixir.Archethic.P2P.Message.CrossValidationDone',
                  'Elixir.Archethic.P2P.Message.EncryptedStorageNonce',
                  'Elixir.Archethic.P2P.Message.Error',
                  'Elixir.Archethic.P2P.Message.FirstPublicKey',
                  'Elixir.Archethic.P2P.Message.GenesisAddress',
                  'Elixir.Archethic.P2P.Message.GetBalance',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummaries',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummariesAggregate',
                  'Elixir.Archethic.P2P.Message.GetBeaconSummary',
                  'Elixir.Archethic.P2P.Message.GetBootstrappingNodes',
                  'Elixir.Archethic.P2P.Message.GetCurrentSummaries',
                  'Elixir.Archethic.P2P.Message.GetFirstPublicKey',
                  'Elixir.Archethic.P2P.Message.GetGenesisAddress',
                  'Elixir.Archethic.P2P.Message.GetLastTransaction',
                  'Elixir.Archethic.P2P.Message.GetLastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.GetNextAddresses',
                  'Elixir.Archethic.P2P.Message.GetP2PView',
                  'Elixir.Archethic.P2P.Message.GetStorageNonce',
                  'Elixir.Archethic.P2P.Message.GetTransaction',
                  'Elixir.Archethic.P2P.Message.GetTransactionChain',
                  'Elixir.Archethic.P2P.Message.GetTransactionChainLength',
                  'Elixir.Archethic.P2P.Message.GetTransactionInputs',
                  'Elixir.Archethic.P2P.Message.GetTransactionSummary',
                  'Elixir.Archethic.P2P.Message.GetUnspentOutputs',
                  'Elixir.Archethic.P2P.Message.LastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.ListNodes',
                  'Elixir.Archethic.P2P.Message.NewBeaconSlot',
                  'Elixir.Archethic.P2P.Message.NewTransaction',
                  'Elixir.Archethic.P2P.Message.NodeList',
                  'Elixir.Archethic.P2P.Message.NotFound',
                  'Elixir.Archethic.P2P.Message.NotifyEndOfNodeSync',
                  'Elixir.Archethic.P2P.Message.NotifyLastTransactionAddress',
                  'Elixir.Archethic.P2P.Message.NotifyPreviousChain',
                  'Elixir.Archethic.P2P.Message.NotifyReplicationValidation',
                  'Elixir.Archethic.P2P.Message.Ok',
                  'Elixir.Archethic.P2P.Message.P2PView',
                  'Elixir.Archethic.P2P.Message.Ping',
                  'Elixir.Archethic.P2P.Message.RegisterBeaconUpdates',
                  'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',
                  'Elixir.Archethic.P2P.Message.ReplicateTransaction',
                  'Elixir.Archethic.P2P.Message.ReplicateTransactionChain',
                  'Elixir.Archethic.P2P.Message.ReplicationError',
                  'Elixir.Archethic.P2P.Message.ShardRepair',
                  'Elixir.Archethic.P2P.Message.StartMining',
                  'Elixir.Archethic.P2P.Message.TransactionChainLength',
                  'Elixir.Archethic.P2P.Message.TransactionInputList',
                  'Elixir.Archethic.P2P.Message.TransactionList',
                  'Elixir.Archethic.P2P.Message.TransactionSummaryList',
                  'Elixir.Archethic.P2P.Message.UnspentOutputList',
                  'Elixir.Archethic.P2P.Message.ValidateTransaction',
                  'Elixir.Archethic.P2P.Message.ValidationError']},
    {load_module,'Elixir.Archethic.P2P',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P.BootstrappingSeeds',
                  'Elixir.Archethic.P2P.MemTable',
                  'Elixir.Archethic.P2P.MemTableLoader',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.NewBeaconSlot',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ShardRepair',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Mining.StandaloneWorkflow',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.P2P.Client.Connection',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P.MemTable',
             'Elixir.Archethic.P2P.Message','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Client.DefaultImpl',brutal_purge,soft_purge,
                 ['Elixir.Archethic.BeaconChain.Update',
                  'Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P.Client.Connection',
                  'Elixir.Archethic.P2P.Message']},
    {load_module,'Elixir.Archethic.P2P.Message.NotifyLastTransactionAddress',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.P2P',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.Replication',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Contracts','Elixir.Archethic.Crypto',
                  'Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.Replication.TransactionPool',
                  'Elixir.Archethic.Reward',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicatePendingTransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicateTransactionChain',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.SelfRepair.RepairWorker',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.P2P','Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.Replication',
             'Elixir.Archethic.TransactionChain']},
    {update,'Elixir.Archethic.Mining.DistributedWorkflow',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
             'Elixir.Archethic.P2P.Message',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Networking.Scheduler',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.P2P.Message.ReplicateTransaction',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.OracleChain.Scheduler',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.P2P','Elixir.Archethic.TransactionChain',
             'Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {update,'Elixir.Archethic.P2P.MemTableLoader',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic.Crypto','Elixir.Archethic.DB',
             'Elixir.Archethic.P2P','Elixir.Archethic.P2P.MemTable',
             'Elixir.Archethic.TransactionChain','Elixir.Archethic.Utils']},
    {load_module,'Elixir.Archethic.SelfRepair.Sync.TransactionHandler',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.P2P.Message',
                  'Elixir.Archethic.Replication',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']},
    {update,'Elixir.Archethic.Reward.Scheduler',
            {advanced,[]},brutal_purge,soft_purge,
            ['Elixir.Archethic','Elixir.Archethic.Crypto',
             'Elixir.Archethic.DB','Elixir.Archethic.P2P',
             'Elixir.Archethic.Reward','Elixir.Archethic.Utils',
             'Elixir.Archethic.Utils.DetectNodeResponsiveness']},
    {load_module,'Elixir.Archethic.Reward',brutal_purge,soft_purge,
                 ['Elixir.Archethic.Crypto','Elixir.Archethic.P2P',
                  'Elixir.Archethic.Reward.MemTables.RewardTokens',
                  'Elixir.Archethic.Reward.MemTablesLoader',
                  'Elixir.Archethic.Reward.Scheduler',
                  'Elixir.Archethic.TransactionChain',
                  'Elixir.Archethic.Utils']}]}]}.
